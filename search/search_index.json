{"config":{"lang":["fr"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Guide des bonnes pratiques Python Le but est de cr\u00e9er un guide des bonnes pratiques pour pouvoir uniformiser le code des diff\u00e9rents programmeurs python en se mettant d'accord sur des r\u00e8gles communes. Ce guide pourra \u00eatre enrichi par la suite de template de base pour les dossiers ou autre. Ressources Les diff\u00e9rentes section et ressources utilis\u00e9es pour r\u00e9diger ce guide sont les suivantes. Code. Simply. Clearly. Calmly. IDE configuration vscode R\u00e9daction documentation Python MkDocs MkDocs-Material mkdocstrings Code Tells You How, Comments Tell You Why Diagram as Code Formating, Linting, Type Hinting flake8 isort Black : The uncompromising code formatter mypy rope (refactoring) Static Code Analysis for Python Complexity Waterfall Jones complexity wemake-python-styleguide Best practices Test unitaires Pytest Coverage The tests talk Int\u00e9gration, d\u00e9veloppement continu pre-commit Automate Python workflow using pre-commits: black and flake8 Continuous Delivery for Machine Learning Continuous Delivery 101 GoCD User Documentation GitHub Actions for perfect Python Continuous Integration Docker Dockerize your Development Environment Developing inside a Container devcontainer.json reference Advanced Container Configuration Creating an API with FastAPI and Docker Faster Docker builds with pipenv, poetry, or pip-tools Code quality Radon and code metrics M\u00e9triques d'Halstead Think Twice Before Using the \u201cMaintainability Index\u201d Using Metrics to Evaluate Software System Maintainabilitv Code security Bandit Bandit Doc Typosquatting programming language package managers A trier How to set up a perfect Python project The Magical Number Seven, Plus or Minus Two <<<<<<< HEAD Key Kubernetes Concepts Key Kubernetes Concepts GoCD User Documentation Starting New Python Project in VSCode Configuring Python Workspace: Poetry Data Versioning DVC Data Version Control With Python and DVC MLOps MLOps: Model Monitoring 101 42ef51b6664a758bbb29a61826065b305ae7d0d4","title":"Acceuil"},{"location":"#guide-des-bonnes-pratiques-python","text":"Le but est de cr\u00e9er un guide des bonnes pratiques pour pouvoir uniformiser le code des diff\u00e9rents programmeurs python en se mettant d'accord sur des r\u00e8gles communes. Ce guide pourra \u00eatre enrichi par la suite de template de base pour les dossiers ou autre.","title":"Guide des bonnes pratiques Python"},{"location":"#ressources","text":"Les diff\u00e9rentes section et ressources utilis\u00e9es pour r\u00e9diger ce guide sont les suivantes. Code. Simply. Clearly. Calmly.","title":"Ressources"},{"location":"#ide-configuration-vscode","text":"","title":"IDE configuration vscode"},{"location":"#redaction-documentation-python","text":"MkDocs MkDocs-Material mkdocstrings Code Tells You How, Comments Tell You Why Diagram as Code","title":"R\u00e9daction documentation Python"},{"location":"#formating-linting-type-hinting","text":"flake8 isort Black : The uncompromising code formatter mypy rope (refactoring) Static Code Analysis for Python Complexity Waterfall Jones complexity wemake-python-styleguide Best practices","title":"Formating, Linting, Type Hinting"},{"location":"#test-unitaires","text":"Pytest Coverage The tests talk","title":"Test unitaires"},{"location":"#integration-developpement-continu","text":"pre-commit Automate Python workflow using pre-commits: black and flake8 Continuous Delivery for Machine Learning Continuous Delivery 101 GoCD User Documentation GitHub Actions for perfect Python Continuous Integration","title":"Int\u00e9gration, d\u00e9veloppement continu"},{"location":"#docker","text":"Dockerize your Development Environment Developing inside a Container devcontainer.json reference Advanced Container Configuration Creating an API with FastAPI and Docker Faster Docker builds with pipenv, poetry, or pip-tools","title":"Docker"},{"location":"#code-quality","text":"Radon and code metrics M\u00e9triques d'Halstead Think Twice Before Using the \u201cMaintainability Index\u201d Using Metrics to Evaluate Software System Maintainabilitv","title":"Code quality"},{"location":"#code-security","text":"Bandit Bandit Doc Typosquatting programming language package managers","title":"Code security"},{"location":"#a-trier","text":"How to set up a perfect Python project The Magical Number Seven, Plus or Minus Two <<<<<<< HEAD","title":"A trier"},{"location":"#key-kubernetes-concepts","text":"Key Kubernetes Concepts GoCD User Documentation Starting New Python Project in VSCode Configuring Python Workspace: Poetry","title":"Key Kubernetes Concepts"},{"location":"#data-versioning","text":"DVC Data Version Control With Python and DVC","title":"Data Versioning"},{"location":"#mlops","text":"MLOps: Model Monitoring 101 42ef51b6664a758bbb29a61826065b305ae7d0d4","title":"MLOps"},{"location":"cicd/precommit/","text":"","title":"Pre-commit"},{"location":"code_quality/radon/","text":"","title":"Radon"},{"location":"code_security/bandit/","text":"","title":"Bandit"},{"location":"doc_redaction/diagrammes/","text":"Diagram as Code https://diagrams.mingrammer.com/","title":"Diagrammes"},{"location":"doc_redaction/diagrammes/#diagram-as-code","text":"https://diagrams.mingrammer.com/","title":"Diagram as Code"},{"location":"doc_redaction/mkdocs/","text":"MkDocs pour r\u00e9diger la documentation Python","title":"MkDocs"},{"location":"doc_redaction/mkdocs/#mkdocs-pour-rediger-la-documentation-python","text":"","title":"MkDocs pour r\u00e9diger la documentation Python"},{"location":"docker/dev_env/","text":"","title":"Environnement de dev"},{"location":"format_lint_hint/format/","text":"","title":"Formating"},{"location":"format_lint_hint/hint/","text":"","title":"Hint"},{"location":"format_lint_hint/lint/","text":"","title":"Linting"},{"location":"ide_vscode/conf/","text":"Configuration de VSCode On parlera ici de la configuration de vscode, c'est l'un des IDE standards et il offre beaucoup de possibilit\u00e9s : l'int\u00e9gration de nombreux plugins, la possibilit\u00e9 d'avoir un IDE lors d'une connexion ssh, la possibilit\u00e9 de travailler directement dans un environnement de dev Docker depuis vscode... D'autres ide existent et sont tr\u00e8s bien : Atom, PyCharm, Sublime text, le choix de l'IDE pourrait ne pas \u00eatre fix\u00e9. Question Doit on fixer le choix de l'IDE, afin d'avoir le m\u00eame pour tout le monde ? M\u00eame si je pense que tout le monde utilise d\u00e9j\u00e0 vscode. La configuration de vscode se fait g\u00e9n\u00e9ralement de fa\u00e7on globale , toutefois pour que les configurations soient li\u00e9es aux projets et non \u00e0 l'utilisateur, il est important que les configurations puissent voyager avec gitlab, donc locale . Info Chaque projet vscode peut avoir une configuration locale en fournissant un fichier settings.json et en le situant \u00e0 la racine du projet dans le dossier cach\u00e9 .vscode . 1 2 3 4 5 6 racine du projet | |_ .vscode | | | |_ settings.json |... Ce projet peut ainsi voyager avec gitlab et petmettre d'avoir toujours la m\u00eame configuration peut importe le pc depuis lequel le pull est fait. Comme dit pr\u00e9c\u00e9demment, le fichier de configuration locale est un json, d\u00e9taillons. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 { // co nf ig g\u00e9 n \u00e9rale \"editor.suggestSelection\" : \"first\" , \"workbench.colorTheme\" : \"One Dark Pro\" , \"editor.fontLigatures\" : true , \"editor.fontFamily\" : \"JetBrains Mono Medium\" , \"editor.fontSize\" : 16 , \"terminal.integrated.cursorStyle\" : \"line\" , \"terminal.integrated.cursorWidth\" : 2 , \"terminal.integrated.fontFamily\" : \"MesloLGS NF\" , \"git.autofetch\" : true , \"trailing-spaces.trimOnSave\" : true , // co nf ig py t ho n \"editor.rulers\" : [ 88 , 120 ], \"workbench.colorCustomizations\" : { \"editorRuler.foreground\" : \"#750917\" }, \"python.languageServer\" : \"Pylance\" , \"python.sortImports.path\" : \"isort\" , \"python.linting.flake8Path\" : \"flake8\" , \"python.linting.flake8Enabled\" : true , \"python.linting.pylintEnabled\" : false , \"python.linting.ignorePatterns\" : [ \".vscode/*.py\" , \"**/site-packages/**/*.py\" , \".venv/**/*.py\" , \"**.pytest_cache/**/*.py\" ], \"python.formatting.provider\" : \"black\" , \"python.formatting.blackArgs\" : [ \"--line-length=88\" ], \"python.linting.mypyPath\" : \"mypy\" , \"python.linting.mypyEnabled\" : true , \"python.testing.pytestEnabled\" : true , \"editor.formatOnSave\" : true , \"editor.formatOnPaste\" : false , \"editor.formatOnType\" : false , } On va s\u00e9parer les explications en deux parties, la partie g\u00e9n\u00e9rale, et la partie Python. Configuration g\u00e9n\u00e9rale 1 2 3 4 5 6 7 8 9 10 11 12 13 { // co nf ig g\u00e9 n \u00e9rale \"editor.suggestSelection\" : \"first\" , \"workbench.colorTheme\" : \"One Dark Pro\" , \"editor.fontLigatures\" : true , \"editor.fontFamily\" : \"JetBrains Mono Medium\" , \"editor.fontSize\" : 16 , \"terminal.integrated.cursorStyle\" : \"line\" , \"terminal.integrated.cursorWidth\" : 2 , \"terminal.integrated.fontFamily\" : \"MesloLGS NF\" , \"git.autofetch\" : true , \"trailing-spaces.trimOnSave\" : true , } La configuration est plut\u00f4t classique, \"JetBrains Mono Medium\" et \"MesloLGS NF\" sont des polices d'\u00e9critures avec ligatures \"d\u00e9velopp\u00e9es pour la programmation\". Note La deuxi\u00e8me n'est vraiment utile que si vous utilisez zsh comme shell avec Oh My Zsh et Powerlevel10k et voulait activer Powerlevel10k dans le terminal int\u00e9gr\u00e9 de vscode. \"One Dark Pro\" est un th\u00e8me sombre d\u00e9riv\u00e9 du th\u00e8me de base de l'IDE Atom, et \"trailing-spaces.trimOnSave\": true est une option du plugins \"Trailing Spaces\" permettant de supprimer tous les espaces superflux \u00e0 chaque sauvegarde. Configuration avec Python Pour un projet python, il y a deux endroits que l'on doit configurer : Le fichier settings.json . Le fichier setup.cfg , situ\u00e9 \u00e0 la racine du dossier. Le fichier settings.json permet de configurer vscode pour lui dire quel formateur, linter, quelle librairie de tests choisir. Le fichier setup.cfg permet lui de modifier le comportement des ces derniers. Note 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { // co nf ig py t ho n \"editor.rulers\" : [ 88 , 120 ], \"workbench.colorCustomizations\" : { \"editorRuler.foreground\" : \"#750917\" }, \"python.languageServer\" : \"Pylance\" , \"python.sortImports.path\" : \"isort\" , \"python.linting.flake8Path\" : \"flake8\" , \"python.linting.flake8Enabled\" : true , \"python.linting.pylintEnabled\" : false , \"python.linting.ignorePatterns\" : [ \".vscode/*.py\" , \"**/site-packages/**/*.py\" , \".venv/**/*.py\" , \"**.pytest_cache/**/*.py\" ], \"python.formatting.provider\" : \"black\" , \"python.formatting.blackArgs\" : [ \"--line-length=88\" ], \"python.linting.mypyPath\" : \"mypy\" , \"python.linting.mypyEnabled\" : true , \"python.testing.pytestEnabled\" : true , \"editor.formatOnSave\" : true , \"editor.formatOnPaste\" : false , \"editor.formatOnType\" : false , }","title":"Configuration"},{"location":"ide_vscode/conf/#configuration-de-vscode","text":"On parlera ici de la configuration de vscode, c'est l'un des IDE standards et il offre beaucoup de possibilit\u00e9s : l'int\u00e9gration de nombreux plugins, la possibilit\u00e9 d'avoir un IDE lors d'une connexion ssh, la possibilit\u00e9 de travailler directement dans un environnement de dev Docker depuis vscode... D'autres ide existent et sont tr\u00e8s bien : Atom, PyCharm, Sublime text, le choix de l'IDE pourrait ne pas \u00eatre fix\u00e9. Question Doit on fixer le choix de l'IDE, afin d'avoir le m\u00eame pour tout le monde ? M\u00eame si je pense que tout le monde utilise d\u00e9j\u00e0 vscode. La configuration de vscode se fait g\u00e9n\u00e9ralement de fa\u00e7on globale , toutefois pour que les configurations soient li\u00e9es aux projets et non \u00e0 l'utilisateur, il est important que les configurations puissent voyager avec gitlab, donc locale . Info Chaque projet vscode peut avoir une configuration locale en fournissant un fichier settings.json et en le situant \u00e0 la racine du projet dans le dossier cach\u00e9 .vscode . 1 2 3 4 5 6 racine du projet | |_ .vscode | | | |_ settings.json |... Ce projet peut ainsi voyager avec gitlab et petmettre d'avoir toujours la m\u00eame configuration peut importe le pc depuis lequel le pull est fait. Comme dit pr\u00e9c\u00e9demment, le fichier de configuration locale est un json, d\u00e9taillons. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 { // co nf ig g\u00e9 n \u00e9rale \"editor.suggestSelection\" : \"first\" , \"workbench.colorTheme\" : \"One Dark Pro\" , \"editor.fontLigatures\" : true , \"editor.fontFamily\" : \"JetBrains Mono Medium\" , \"editor.fontSize\" : 16 , \"terminal.integrated.cursorStyle\" : \"line\" , \"terminal.integrated.cursorWidth\" : 2 , \"terminal.integrated.fontFamily\" : \"MesloLGS NF\" , \"git.autofetch\" : true , \"trailing-spaces.trimOnSave\" : true , // co nf ig py t ho n \"editor.rulers\" : [ 88 , 120 ], \"workbench.colorCustomizations\" : { \"editorRuler.foreground\" : \"#750917\" }, \"python.languageServer\" : \"Pylance\" , \"python.sortImports.path\" : \"isort\" , \"python.linting.flake8Path\" : \"flake8\" , \"python.linting.flake8Enabled\" : true , \"python.linting.pylintEnabled\" : false , \"python.linting.ignorePatterns\" : [ \".vscode/*.py\" , \"**/site-packages/**/*.py\" , \".venv/**/*.py\" , \"**.pytest_cache/**/*.py\" ], \"python.formatting.provider\" : \"black\" , \"python.formatting.blackArgs\" : [ \"--line-length=88\" ], \"python.linting.mypyPath\" : \"mypy\" , \"python.linting.mypyEnabled\" : true , \"python.testing.pytestEnabled\" : true , \"editor.formatOnSave\" : true , \"editor.formatOnPaste\" : false , \"editor.formatOnType\" : false , } On va s\u00e9parer les explications en deux parties, la partie g\u00e9n\u00e9rale, et la partie Python.","title":"Configuration de VSCode"},{"location":"ide_vscode/conf/#configuration-generale","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 { // co nf ig g\u00e9 n \u00e9rale \"editor.suggestSelection\" : \"first\" , \"workbench.colorTheme\" : \"One Dark Pro\" , \"editor.fontLigatures\" : true , \"editor.fontFamily\" : \"JetBrains Mono Medium\" , \"editor.fontSize\" : 16 , \"terminal.integrated.cursorStyle\" : \"line\" , \"terminal.integrated.cursorWidth\" : 2 , \"terminal.integrated.fontFamily\" : \"MesloLGS NF\" , \"git.autofetch\" : true , \"trailing-spaces.trimOnSave\" : true , } La configuration est plut\u00f4t classique, \"JetBrains Mono Medium\" et \"MesloLGS NF\" sont des polices d'\u00e9critures avec ligatures \"d\u00e9velopp\u00e9es pour la programmation\". Note La deuxi\u00e8me n'est vraiment utile que si vous utilisez zsh comme shell avec Oh My Zsh et Powerlevel10k et voulait activer Powerlevel10k dans le terminal int\u00e9gr\u00e9 de vscode. \"One Dark Pro\" est un th\u00e8me sombre d\u00e9riv\u00e9 du th\u00e8me de base de l'IDE Atom, et \"trailing-spaces.trimOnSave\": true est une option du plugins \"Trailing Spaces\" permettant de supprimer tous les espaces superflux \u00e0 chaque sauvegarde.","title":"Configuration g\u00e9n\u00e9rale"},{"location":"ide_vscode/conf/#configuration-avec-python","text":"Pour un projet python, il y a deux endroits que l'on doit configurer : Le fichier settings.json . Le fichier setup.cfg , situ\u00e9 \u00e0 la racine du dossier. Le fichier settings.json permet de configurer vscode pour lui dire quel formateur, linter, quelle librairie de tests choisir. Le fichier setup.cfg permet lui de modifier le comportement des ces derniers. Note 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { // co nf ig py t ho n \"editor.rulers\" : [ 88 , 120 ], \"workbench.colorCustomizations\" : { \"editorRuler.foreground\" : \"#750917\" }, \"python.languageServer\" : \"Pylance\" , \"python.sortImports.path\" : \"isort\" , \"python.linting.flake8Path\" : \"flake8\" , \"python.linting.flake8Enabled\" : true , \"python.linting.pylintEnabled\" : false , \"python.linting.ignorePatterns\" : [ \".vscode/*.py\" , \"**/site-packages/**/*.py\" , \".venv/**/*.py\" , \"**.pytest_cache/**/*.py\" ], \"python.formatting.provider\" : \"black\" , \"python.formatting.blackArgs\" : [ \"--line-length=88\" ], \"python.linting.mypyPath\" : \"mypy\" , \"python.linting.mypyEnabled\" : true , \"python.testing.pytestEnabled\" : true , \"editor.formatOnSave\" : true , \"editor.formatOnPaste\" : false , \"editor.formatOnType\" : false , }","title":"Configuration avec Python"},{"location":"testing/unittests/","text":"","title":"Test unitaire"}]}