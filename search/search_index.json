{"config":{"lang":["fr"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Guide des bonnes pratiques Python Le but est de cr\u00e9er un guide des bonnes pratiques pour pouvoir uniformiser le code des diff\u00e9rents programmeurs python en se mettant d'accord sur des r\u00e8gles communes. Ce guide pourra \u00eatre enrichi par la suite de template de base pour les dossiers ou autre. Ressources g\u00e9n\u00e9rales Les diff\u00e9rentes section et ressources utilis\u00e9es pour r\u00e9diger ce guide sont les suivantes. Code. Simply. Clearly. Calmly. Guidelines g\u00e9n\u00e9rales R\u00e9daction documentation Python MkDocs MkDocs-Material mkdocstrings Code Tells You How, Comments Tell You Why Diagram as Code Formating, Linting, Type Hinting flake8 isort Black : The uncompromising code formatter mypy rope (refactoring) Static Code Analysis for Python Complexity Waterfall Jones complexity wemake-python-styleguide Best practices Test unitaires Pytest Coverage The tests talk code coverage The Wide World of Software Testing Int\u00e9gration, d\u00e9veloppement continu Gestion des d\u00e9pendances pre-commit Automate Python workflow using pre-commits: black and flake8 Continuous Delivery for Machine Learning Continuous Delivery 101 GoCD User Documentation GitHub Actions for perfect Python Continuous Integration Build Bot Docker Dockerize your Development Environment Developing inside a Container devcontainer.json reference Advanced Container Configuration Creating an API with FastAPI and Docker Faster Docker builds with pipenv, poetry, or pip-tools Code quality Radon and code metrics M\u00e9triques d'Halstead Think Twice Before Using the \u201cMaintainability Index\u201d Using Metrics to Evaluate Software System Maintainabilitv Code security Bandit Bandit Doc Typosquatting programming language package managers Safety A trier How to set up a perfect Python project The Magical Number Seven, Plus or Minus Two Key Kubernetes Concepts GoCD User Documentation Starting New Python Project in VSCode Configuring Python Workspace: Poetry packaging The Hitchhiker\u2019s Guide to Packaging Poetry FastAPI Guidelines machine learning, MLOps Awesome MLOps Full Stack Deep Learning Data Versioning DVC Data Version Control With Python and DVC First Impressions of Data Science Version Control (DVC) Monitoring Monitoring is a means, not an end MLOps: Model Monitoring 101 Data Monitoring avec great_expectations Great expectations \u2014 An Introduction. TensorFlow Data Validation Pipeline, workflow Airflow Prefect","title":"Acceuil"},{"location":"#guide-des-bonnes-pratiques-python","text":"Le but est de cr\u00e9er un guide des bonnes pratiques pour pouvoir uniformiser le code des diff\u00e9rents programmeurs python en se mettant d'accord sur des r\u00e8gles communes. Ce guide pourra \u00eatre enrichi par la suite de template de base pour les dossiers ou autre.","title":"Guide des bonnes pratiques Python"},{"location":"#ressources-generales","text":"Les diff\u00e9rentes section et ressources utilis\u00e9es pour r\u00e9diger ce guide sont les suivantes. Code. Simply. Clearly. Calmly.","title":"Ressources g\u00e9n\u00e9rales"},{"location":"#guidelines-generales","text":"","title":"Guidelines g\u00e9n\u00e9rales"},{"location":"#redaction-documentation-python","text":"MkDocs MkDocs-Material mkdocstrings Code Tells You How, Comments Tell You Why Diagram as Code","title":"R\u00e9daction documentation Python"},{"location":"#formating-linting-type-hinting","text":"flake8 isort Black : The uncompromising code formatter mypy rope (refactoring) Static Code Analysis for Python Complexity Waterfall Jones complexity wemake-python-styleguide Best practices","title":"Formating, Linting, Type Hinting"},{"location":"#test-unitaires","text":"Pytest Coverage The tests talk code coverage The Wide World of Software Testing","title":"Test unitaires"},{"location":"#integration-developpement-continu","text":"Gestion des d\u00e9pendances pre-commit Automate Python workflow using pre-commits: black and flake8 Continuous Delivery for Machine Learning Continuous Delivery 101 GoCD User Documentation GitHub Actions for perfect Python Continuous Integration Build Bot","title":"Int\u00e9gration, d\u00e9veloppement continu"},{"location":"#docker","text":"Dockerize your Development Environment Developing inside a Container devcontainer.json reference Advanced Container Configuration Creating an API with FastAPI and Docker Faster Docker builds with pipenv, poetry, or pip-tools","title":"Docker"},{"location":"#code-quality","text":"Radon and code metrics M\u00e9triques d'Halstead Think Twice Before Using the \u201cMaintainability Index\u201d Using Metrics to Evaluate Software System Maintainabilitv","title":"Code quality"},{"location":"#code-security","text":"Bandit Bandit Doc Typosquatting programming language package managers Safety","title":"Code security"},{"location":"#a-trier","text":"How to set up a perfect Python project The Magical Number Seven, Plus or Minus Two Key Kubernetes Concepts GoCD User Documentation Starting New Python Project in VSCode Configuring Python Workspace: Poetry","title":"A trier"},{"location":"#packaging","text":"The Hitchhiker\u2019s Guide to Packaging Poetry","title":"packaging"},{"location":"#fastapi","text":"","title":"FastAPI"},{"location":"#guidelines-machine-learning-mlops","text":"Awesome MLOps Full Stack Deep Learning","title":"Guidelines machine learning, MLOps"},{"location":"#data-versioning","text":"DVC Data Version Control With Python and DVC First Impressions of Data Science Version Control (DVC)","title":"Data Versioning"},{"location":"#monitoring","text":"Monitoring is a means, not an end MLOps: Model Monitoring 101 Data Monitoring avec great_expectations Great expectations \u2014 An Introduction. TensorFlow Data Validation","title":"Monitoring"},{"location":"#pipeline-workflow","text":"Airflow Prefect","title":"Pipeline, workflow"},{"location":"cicd/precommit/","text":"","title":"Pre-commit"},{"location":"code_quality/radon/","text":"","title":"Radon"},{"location":"code_security/bandit/","text":"","title":"Bandit"},{"location":"doc_redaction/diagrammes/","text":"Diagram as Code https://diagrams.mingrammer.com/","title":"Diagrammes"},{"location":"doc_redaction/diagrammes/#diagram-as-code","text":"https://diagrams.mingrammer.com/","title":"Diagram as Code"},{"location":"doc_redaction/mkdocs/","text":"MkDocs pour r\u00e9diger la documentation Python Mkdocs et Mkdocs-material mkdocsrtrings","title":"MkDocs"},{"location":"doc_redaction/mkdocs/#mkdocs-pour-rediger-la-documentation-python","text":"","title":"MkDocs pour r\u00e9diger la documentation Python"},{"location":"doc_redaction/mkdocs/#mkdocs-et-mkdocs-material","text":"","title":"Mkdocs et Mkdocs-material"},{"location":"doc_redaction/mkdocs/#mkdocsrtrings","text":"","title":"mkdocsrtrings"},{"location":"docker/dev_env/","text":"","title":"Environnement de dev"},{"location":"format_lint_hint/format/","text":"","title":"Formating"},{"location":"format_lint_hint/hint/","text":"","title":"Hint"},{"location":"format_lint_hint/lint/","text":"","title":"Linting"},{"location":"ide_vscode/conf/","text":"Configuration de VSCode On parlera ici de la configuration de vscode, c'est l'un des IDE standards et il offre beaucoup de possibilit\u00e9s : l'int\u00e9gration de nombreux plugins, la possibilit\u00e9 d'avoir un IDE lors d'une connexion ssh, la possibilit\u00e9 de travailler directement dans un environnement de dev Docker depuis vscode... D'autres ide existent et sont tr\u00e8s bien : Atom, PyCharm, Sublime text, le choix de l'IDE pourrait ne pas \u00eatre fix\u00e9. Question Doit on fixer le choix de l'IDE, afin d'avoir le m\u00eame pour tout le monde ? M\u00eame si je pense que tout le monde utilise d\u00e9j\u00e0 vscode. La configuration de vscode se fait g\u00e9n\u00e9ralement de fa\u00e7on globale , toutefois pour que les configurations soient li\u00e9es aux projets et non \u00e0 l'utilisateur, il est important que les configurations puissent voyager avec gitlab, donc locale . Info Chaque projet vscode peut avoir une configuration locale en fournissant un fichier settings.json et en le situant \u00e0 la racine du projet dans le dossier cach\u00e9 .vscode . 1 2 3 4 5 6 racine du projet | |_ .vscode | | | |_ settings.json |... Ce projet peut ainsi voyager avec gitlab et petmettre d'avoir toujours la m\u00eame configuration peut importe le pc depuis lequel le pull est fait. Comme dit pr\u00e9c\u00e9demment, le fichier de configuration locale est un json, d\u00e9taillons. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 { // co nf ig g\u00e9 n \u00e9rale \"editor.suggestSelection\" : \"first\" , \"workbench.colorTheme\" : \"One Dark Pro\" , \"editor.fontLigatures\" : true , \"editor.fontFamily\" : \"JetBrains Mono Medium\" , \"editor.fontSize\" : 16 , \"terminal.integrated.cursorStyle\" : \"line\" , \"terminal.integrated.cursorWidth\" : 2 , \"terminal.integrated.fontFamily\" : \"MesloLGS NF\" , \"git.autofetch\" : true , \"trailing-spaces.trimOnSave\" : true , // co nf ig py t ho n // black \"python.formatting.provider\" : \"black\" , \"python.formatting.blackArgs\" : [ \"--line-length=88\" ], \"editor.formatOnSave\" : true , \"editor.formatOnPaste\" : false , \"editor.formatOnType\" : false , \"editor.rulers\" : [ 88 , 120 ], \"workbench.colorCustomizations\" : { \"editorRuler.foreground\" : \"#750917\" }, // pyla n ce \"python.languageServer\" : \"Pylance\" , // isor t \"python.sortImports.path\" : \"isort\" , \"python.sortImports.args\" : [ \"-sp setup.cfg\" ], \"[python]\" : { \"editor.codeActionsOnSave\" : { \"source.organizeImports\" : true } }, // fla ke 8 \"python.linting.flake8Path\" : \"flake8\" , \"python.linting.flake8Enabled\" : true , \"python.linting.pylintEnabled\" : false , \"python.linting.ignorePatterns\" : [ \".vscode/*.py\" , \"**/site-packages/**/*.py\" , \".venv/**/*.py\" , \"**.pytest_cache/**/*.py\" ], // mypy \"python.linting.mypyPath\" : \"mypy\" , \"python.linting.mypyEnabled\" : true , // py test \"python.testing.pytestEnabled\" : true , } On va s\u00e9parer les explications en deux parties, la partie g\u00e9n\u00e9rale, et la partie Python. Configuration g\u00e9n\u00e9rale 1 2 3 4 5 6 7 8 9 10 11 12 13 { // co nf ig g\u00e9 n \u00e9rale \"editor.suggestSelection\" : \"first\" , \"workbench.colorTheme\" : \"One Dark Pro\" , \"editor.fontLigatures\" : true , \"editor.fontFamily\" : \"JetBrains Mono Medium\" , \"editor.fontSize\" : 16 , \"terminal.integrated.cursorStyle\" : \"line\" , \"terminal.integrated.cursorWidth\" : 2 , \"terminal.integrated.fontFamily\" : \"MesloLGS NF\" , \"git.autofetch\" : true , \"trailing-spaces.trimOnSave\" : true , } La configuration est plut\u00f4t classique, \"JetBrains Mono Medium\" et \"MesloLGS NF\" sont des polices d'\u00e9critures avec ligatures \"d\u00e9velopp\u00e9es pour la programmation\". Note La deuxi\u00e8me n'est vraiment utile que si vous utilisez zsh comme shell avec Oh My Zsh et Powerlevel10k et voulait activer Powerlevel10k dans le terminal int\u00e9gr\u00e9 de vscode. \"One Dark Pro\" est un th\u00e8me sombre d\u00e9riv\u00e9 du th\u00e8me de base de l'IDE Atom, et \"trailing-spaces.trimOnSave\": true est une option du plugins \"Trailing Spaces\" permettant de supprimer tous les espaces superflux \u00e0 chaque sauvegarde. Configuration avec Python Pour un projet python, il y a deux endroits que l'on doit configurer : Le fichier settings.json . Le fichier setup.cfg , situ\u00e9 \u00e0 la racine du dossier. Le fichier settings.json permet de configurer vscode pour lui dire quel formateur, linter, quelle librairie de tests choisir pour v\u00e9rifier la qualit\u00e9 du code, le fichier setup.cfg lui fixera les param\u00e8tres des ces derniers. Note D'autres fichiers de configurations des librairies python, comme le fichier pyproject.toml d\u00e9fini dans PEP518 , qui est offciellement le fichier de configuration pr\u00e9f\u00e9r\u00e9 par le formateur black , et aussi le fichier de configuration pr\u00e9f\u00e9r\u00e9 pour le manager de d\u00e9pendances et de projet poetry . Sauf que les d\u00e9veloppeurs de flake8 ont d\u00e9cid\u00e9s qu'ils ne supporteraient pas le format pyproject.toml , les d\u00e9veloppeurs de mypy y r\u00e9fl\u00e9chissent...depuis 2018... Les librairies isort , pytest et coverage sont compatibles avec pyproject.toml , mais dans tous les cas on devrait garder un fichier setup.cfg pour flake8 et tous ses plugins. black n'ayant que peu de choix dans ses configurations, autant tout mettre dans un fichier setup.cfg . Dans ce fichier de configuration, on utilise donc : black pour le formatage du code. isort pour les triage des imports. flake8 pour le linting. mypy pour le type hinting. pytest pour l'ensemble des tests unitaires, d'int\u00e9grations, etc. Note Ca parait \u00e9vident, mais m\u00eame si ces modules sont s\u00e9lectionn\u00e9s dans vscode, rien ne marchera s'ils ne sont pas install\u00e9s dans votre environnement virtuel, environnement docker ou autre. On reviendra plus en d\u00e9tails sur chacun plus tard, expliquons ce fichier de config. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 { // co nf ig py t ho n // black \"python.formatting.provider\" : \"black\" , \"python.formatting.blackArgs\" : [ \"--line-length=88\" ], \"editor.formatOnSave\" : true , \"editor.formatOnPaste\" : false , \"editor.formatOnType\" : false , \"editor.rulers\" : [ 88 , 120 ], \"workbench.colorCustomizations\" : { \"editorRuler.foreground\" : \"#750917\" }, // pyla n ce \"python.languageServer\" : \"Pylance\" , // isor t \"python.sortImports.path\" : \"isort\" , \"python.sortImports.args\" : [ \"-sp setup.cfg\" ], \"[python]\" : { \"editor.codeActionsOnSave\" : { \"source.organizeImports\" : true } }, // fla ke 8 \"python.linting.flake8Path\" : \"flake8\" , \"python.linting.flake8Enabled\" : true , \"python.linting.pylintEnabled\" : false , \"python.linting.ignorePatterns\" : [ \".vscode/*.py\" , \"**/site-packages/**/*.py\" , \".venv/**/*.py\" , \"**.pytest_cache/**/*.py\" ], // mypy \"python.linting.mypyPath\" : \"mypy\" , \"python.linting.mypyEnabled\" : true , // py test \"python.testing.pytestEnabled\" : true , } black La premi\u00e8re partie active black comme formateur du code. On fixe la longueur maximale du code (ie pas de la documentation en docstrings) \u00e0 88 caract\u00e8res avec python.formatting.blackArgs , qui est la longueur maximale accept\u00e9e par black par d\u00e9faut. On fixe le formatage du code en automatique \u00e0 chaque sauvegarde, on d\u00e9sactive le formatage lors d'une copie ou lorsque l'on tape. Afin d'avoir un rep\u00e8re visuel pour la longueur du code, on cr\u00e9e une r\u00e8gle verticale \u00e0 88 caract\u00e8res et une a 120 caract\u00e8res via \"editor.rulers\" . La longueur de 120 caract\u00e8res est un choix personnel pour la longueur maximale des commentaires (de moins en moins utilis\u00e9). On choisit la couleur de ces r\u00e8gles verticales via \"editorRuler.foreground\" , ici rouge. pylance Pylance est un plugin de Microsoft permettant permettant un support am\u00e9lior\u00e9 du plugin python. isort isort est un module permettant de trier par ordre alphab\u00e9tique et de fa\u00e7on automatique dans un ordre d'importance pr\u00e9cis. Par d\u00e9faut, l'ordre d'importance est le suivant. FUTURE, from __future__ import ... STDLIB, les librairies standards fournies par python de base, par exemple pathlib THIRDPARTY, la plupart des autres librairies, numpy, pandas, etc (celles qui ont besoin d'un pip install ... ou conda install ... ). FIRSTPARTY, les modules provenant du projet python actuel. LOCALFOLDER, les imports locaux, g\u00e9n\u00e9ralement des imports avec des chemins relatifs. python.sortImports.args permet de dire o\u00f9 se trouve le \"setup path\" (-sp), l'autre action permet d'automatiser le tri \u00e0 chaque sauvegarde, similaire doc \u00e0 celle pour black. flake8 flake8 est un linter , il permet de v\u00e9rifier que la code suit bien certaines r\u00e8gles de syntaxes. Pour citer wikip\u00e9dia au lieu de le paraphraser : Quote lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors, and suspicious constructs. The term originates from a Unix utility that examined C language source code. black formate le code selon certaines r\u00e8gles qui lui sont propres, par exemple les strings sont toutes d\u00e9finies entre doubles apostrophes \" , l'anglais utilisant d\u00e9j\u00e0 les apostrophes simples ' pour le possessif ou pour les abbr\u00e9viations, cela \u00e9vite les probl\u00e8mes de conflits. flake8 peut \u00eatre configur\u00e9 pour s'adapter aux r\u00e8gles de black , et prendre en charge d'autres plugins, comme wemake-python-styleguide qui permet par exemple aussi de v\u00e9rifier la compl\u00e9xit\u00e9 des fonctions. D'autres linter sont disponibles dans vscode, comme pylint , \"python.linting.pylintEnabled\": false le d\u00e9sactive, les lignes de configs suivantes d\u00e9sactivent flake8 pour certains r\u00e9pertoires. mypy mypy permet de faire du 'type hinting\", en d'autres termes il permet de d\u00e9finir le type de variables que l'on aura en entr\u00e9e d'une fonction, et en d\u00e9duira si cette fonction est coh\u00e9rente. Voici un exemple classique de fonction. 1 2 def sum ( x , y ): return x + y Maintenant avec du type hinting, mais une erreur . 1 2 def sum ( x : int , y : str ): return x + y mypy retournera une erreur, en disant que cette somme est incoh\u00e9rente. 1 2 def sum ( x : int , y : int ): return x + y Cette fonction l\u00e0 sera valid\u00e9e. mypy est une aide suppl\u00e9mentaire pour la compr\u00e9hension des fonctions, mais aussi pour la r\u00e9daction des docstrings car ces d\u00e9corations seront directement r\u00e9cup\u00e9r\u00e9es par mkdocstrings et le plugin Python Docstring Generator de vscode. mypy \u00e9tant compatible avec flake8 , \"python.linting.mypyEnabled\": true active cette compatibilit\u00e9 en permettant de recevoir les messages de mypy via des messages flake8 dans vscode. pytest Librairie pour les tests python.","title":"Configuration"},{"location":"ide_vscode/conf/#configuration-de-vscode","text":"On parlera ici de la configuration de vscode, c'est l'un des IDE standards et il offre beaucoup de possibilit\u00e9s : l'int\u00e9gration de nombreux plugins, la possibilit\u00e9 d'avoir un IDE lors d'une connexion ssh, la possibilit\u00e9 de travailler directement dans un environnement de dev Docker depuis vscode... D'autres ide existent et sont tr\u00e8s bien : Atom, PyCharm, Sublime text, le choix de l'IDE pourrait ne pas \u00eatre fix\u00e9. Question Doit on fixer le choix de l'IDE, afin d'avoir le m\u00eame pour tout le monde ? M\u00eame si je pense que tout le monde utilise d\u00e9j\u00e0 vscode. La configuration de vscode se fait g\u00e9n\u00e9ralement de fa\u00e7on globale , toutefois pour que les configurations soient li\u00e9es aux projets et non \u00e0 l'utilisateur, il est important que les configurations puissent voyager avec gitlab, donc locale . Info Chaque projet vscode peut avoir une configuration locale en fournissant un fichier settings.json et en le situant \u00e0 la racine du projet dans le dossier cach\u00e9 .vscode . 1 2 3 4 5 6 racine du projet | |_ .vscode | | | |_ settings.json |... Ce projet peut ainsi voyager avec gitlab et petmettre d'avoir toujours la m\u00eame configuration peut importe le pc depuis lequel le pull est fait. Comme dit pr\u00e9c\u00e9demment, le fichier de configuration locale est un json, d\u00e9taillons. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 { // co nf ig g\u00e9 n \u00e9rale \"editor.suggestSelection\" : \"first\" , \"workbench.colorTheme\" : \"One Dark Pro\" , \"editor.fontLigatures\" : true , \"editor.fontFamily\" : \"JetBrains Mono Medium\" , \"editor.fontSize\" : 16 , \"terminal.integrated.cursorStyle\" : \"line\" , \"terminal.integrated.cursorWidth\" : 2 , \"terminal.integrated.fontFamily\" : \"MesloLGS NF\" , \"git.autofetch\" : true , \"trailing-spaces.trimOnSave\" : true , // co nf ig py t ho n // black \"python.formatting.provider\" : \"black\" , \"python.formatting.blackArgs\" : [ \"--line-length=88\" ], \"editor.formatOnSave\" : true , \"editor.formatOnPaste\" : false , \"editor.formatOnType\" : false , \"editor.rulers\" : [ 88 , 120 ], \"workbench.colorCustomizations\" : { \"editorRuler.foreground\" : \"#750917\" }, // pyla n ce \"python.languageServer\" : \"Pylance\" , // isor t \"python.sortImports.path\" : \"isort\" , \"python.sortImports.args\" : [ \"-sp setup.cfg\" ], \"[python]\" : { \"editor.codeActionsOnSave\" : { \"source.organizeImports\" : true } }, // fla ke 8 \"python.linting.flake8Path\" : \"flake8\" , \"python.linting.flake8Enabled\" : true , \"python.linting.pylintEnabled\" : false , \"python.linting.ignorePatterns\" : [ \".vscode/*.py\" , \"**/site-packages/**/*.py\" , \".venv/**/*.py\" , \"**.pytest_cache/**/*.py\" ], // mypy \"python.linting.mypyPath\" : \"mypy\" , \"python.linting.mypyEnabled\" : true , // py test \"python.testing.pytestEnabled\" : true , } On va s\u00e9parer les explications en deux parties, la partie g\u00e9n\u00e9rale, et la partie Python.","title":"Configuration de VSCode"},{"location":"ide_vscode/conf/#configuration-generale","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 { // co nf ig g\u00e9 n \u00e9rale \"editor.suggestSelection\" : \"first\" , \"workbench.colorTheme\" : \"One Dark Pro\" , \"editor.fontLigatures\" : true , \"editor.fontFamily\" : \"JetBrains Mono Medium\" , \"editor.fontSize\" : 16 , \"terminal.integrated.cursorStyle\" : \"line\" , \"terminal.integrated.cursorWidth\" : 2 , \"terminal.integrated.fontFamily\" : \"MesloLGS NF\" , \"git.autofetch\" : true , \"trailing-spaces.trimOnSave\" : true , } La configuration est plut\u00f4t classique, \"JetBrains Mono Medium\" et \"MesloLGS NF\" sont des polices d'\u00e9critures avec ligatures \"d\u00e9velopp\u00e9es pour la programmation\". Note La deuxi\u00e8me n'est vraiment utile que si vous utilisez zsh comme shell avec Oh My Zsh et Powerlevel10k et voulait activer Powerlevel10k dans le terminal int\u00e9gr\u00e9 de vscode. \"One Dark Pro\" est un th\u00e8me sombre d\u00e9riv\u00e9 du th\u00e8me de base de l'IDE Atom, et \"trailing-spaces.trimOnSave\": true est une option du plugins \"Trailing Spaces\" permettant de supprimer tous les espaces superflux \u00e0 chaque sauvegarde.","title":"Configuration g\u00e9n\u00e9rale"},{"location":"ide_vscode/conf/#configuration-avec-python","text":"Pour un projet python, il y a deux endroits que l'on doit configurer : Le fichier settings.json . Le fichier setup.cfg , situ\u00e9 \u00e0 la racine du dossier. Le fichier settings.json permet de configurer vscode pour lui dire quel formateur, linter, quelle librairie de tests choisir pour v\u00e9rifier la qualit\u00e9 du code, le fichier setup.cfg lui fixera les param\u00e8tres des ces derniers. Note D'autres fichiers de configurations des librairies python, comme le fichier pyproject.toml d\u00e9fini dans PEP518 , qui est offciellement le fichier de configuration pr\u00e9f\u00e9r\u00e9 par le formateur black , et aussi le fichier de configuration pr\u00e9f\u00e9r\u00e9 pour le manager de d\u00e9pendances et de projet poetry . Sauf que les d\u00e9veloppeurs de flake8 ont d\u00e9cid\u00e9s qu'ils ne supporteraient pas le format pyproject.toml , les d\u00e9veloppeurs de mypy y r\u00e9fl\u00e9chissent...depuis 2018... Les librairies isort , pytest et coverage sont compatibles avec pyproject.toml , mais dans tous les cas on devrait garder un fichier setup.cfg pour flake8 et tous ses plugins. black n'ayant que peu de choix dans ses configurations, autant tout mettre dans un fichier setup.cfg . Dans ce fichier de configuration, on utilise donc : black pour le formatage du code. isort pour les triage des imports. flake8 pour le linting. mypy pour le type hinting. pytest pour l'ensemble des tests unitaires, d'int\u00e9grations, etc. Note Ca parait \u00e9vident, mais m\u00eame si ces modules sont s\u00e9lectionn\u00e9s dans vscode, rien ne marchera s'ils ne sont pas install\u00e9s dans votre environnement virtuel, environnement docker ou autre. On reviendra plus en d\u00e9tails sur chacun plus tard, expliquons ce fichier de config. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 { // co nf ig py t ho n // black \"python.formatting.provider\" : \"black\" , \"python.formatting.blackArgs\" : [ \"--line-length=88\" ], \"editor.formatOnSave\" : true , \"editor.formatOnPaste\" : false , \"editor.formatOnType\" : false , \"editor.rulers\" : [ 88 , 120 ], \"workbench.colorCustomizations\" : { \"editorRuler.foreground\" : \"#750917\" }, // pyla n ce \"python.languageServer\" : \"Pylance\" , // isor t \"python.sortImports.path\" : \"isort\" , \"python.sortImports.args\" : [ \"-sp setup.cfg\" ], \"[python]\" : { \"editor.codeActionsOnSave\" : { \"source.organizeImports\" : true } }, // fla ke 8 \"python.linting.flake8Path\" : \"flake8\" , \"python.linting.flake8Enabled\" : true , \"python.linting.pylintEnabled\" : false , \"python.linting.ignorePatterns\" : [ \".vscode/*.py\" , \"**/site-packages/**/*.py\" , \".venv/**/*.py\" , \"**.pytest_cache/**/*.py\" ], // mypy \"python.linting.mypyPath\" : \"mypy\" , \"python.linting.mypyEnabled\" : true , // py test \"python.testing.pytestEnabled\" : true , }","title":"Configuration avec Python"},{"location":"ide_vscode/conf/#black","text":"La premi\u00e8re partie active black comme formateur du code. On fixe la longueur maximale du code (ie pas de la documentation en docstrings) \u00e0 88 caract\u00e8res avec python.formatting.blackArgs , qui est la longueur maximale accept\u00e9e par black par d\u00e9faut. On fixe le formatage du code en automatique \u00e0 chaque sauvegarde, on d\u00e9sactive le formatage lors d'une copie ou lorsque l'on tape. Afin d'avoir un rep\u00e8re visuel pour la longueur du code, on cr\u00e9e une r\u00e8gle verticale \u00e0 88 caract\u00e8res et une a 120 caract\u00e8res via \"editor.rulers\" . La longueur de 120 caract\u00e8res est un choix personnel pour la longueur maximale des commentaires (de moins en moins utilis\u00e9). On choisit la couleur de ces r\u00e8gles verticales via \"editorRuler.foreground\" , ici rouge.","title":"black"},{"location":"ide_vscode/conf/#pylance","text":"Pylance est un plugin de Microsoft permettant permettant un support am\u00e9lior\u00e9 du plugin python.","title":"pylance"},{"location":"ide_vscode/conf/#isort","text":"isort est un module permettant de trier par ordre alphab\u00e9tique et de fa\u00e7on automatique dans un ordre d'importance pr\u00e9cis. Par d\u00e9faut, l'ordre d'importance est le suivant. FUTURE, from __future__ import ... STDLIB, les librairies standards fournies par python de base, par exemple pathlib THIRDPARTY, la plupart des autres librairies, numpy, pandas, etc (celles qui ont besoin d'un pip install ... ou conda install ... ). FIRSTPARTY, les modules provenant du projet python actuel. LOCALFOLDER, les imports locaux, g\u00e9n\u00e9ralement des imports avec des chemins relatifs. python.sortImports.args permet de dire o\u00f9 se trouve le \"setup path\" (-sp), l'autre action permet d'automatiser le tri \u00e0 chaque sauvegarde, similaire doc \u00e0 celle pour black.","title":"isort"},{"location":"ide_vscode/conf/#flake8","text":"flake8 est un linter , il permet de v\u00e9rifier que la code suit bien certaines r\u00e8gles de syntaxes. Pour citer wikip\u00e9dia au lieu de le paraphraser : Quote lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors, and suspicious constructs. The term originates from a Unix utility that examined C language source code. black formate le code selon certaines r\u00e8gles qui lui sont propres, par exemple les strings sont toutes d\u00e9finies entre doubles apostrophes \" , l'anglais utilisant d\u00e9j\u00e0 les apostrophes simples ' pour le possessif ou pour les abbr\u00e9viations, cela \u00e9vite les probl\u00e8mes de conflits. flake8 peut \u00eatre configur\u00e9 pour s'adapter aux r\u00e8gles de black , et prendre en charge d'autres plugins, comme wemake-python-styleguide qui permet par exemple aussi de v\u00e9rifier la compl\u00e9xit\u00e9 des fonctions. D'autres linter sont disponibles dans vscode, comme pylint , \"python.linting.pylintEnabled\": false le d\u00e9sactive, les lignes de configs suivantes d\u00e9sactivent flake8 pour certains r\u00e9pertoires.","title":"flake8"},{"location":"ide_vscode/conf/#mypy","text":"mypy permet de faire du 'type hinting\", en d'autres termes il permet de d\u00e9finir le type de variables que l'on aura en entr\u00e9e d'une fonction, et en d\u00e9duira si cette fonction est coh\u00e9rente. Voici un exemple classique de fonction. 1 2 def sum ( x , y ): return x + y Maintenant avec du type hinting, mais une erreur . 1 2 def sum ( x : int , y : str ): return x + y mypy retournera une erreur, en disant que cette somme est incoh\u00e9rente. 1 2 def sum ( x : int , y : int ): return x + y Cette fonction l\u00e0 sera valid\u00e9e. mypy est une aide suppl\u00e9mentaire pour la compr\u00e9hension des fonctions, mais aussi pour la r\u00e9daction des docstrings car ces d\u00e9corations seront directement r\u00e9cup\u00e9r\u00e9es par mkdocstrings et le plugin Python Docstring Generator de vscode. mypy \u00e9tant compatible avec flake8 , \"python.linting.mypyEnabled\": true active cette compatibilit\u00e9 en permettant de recevoir les messages de mypy via des messages flake8 dans vscode.","title":"mypy"},{"location":"ide_vscode/conf/#pytest","text":"Librairie pour les tests python.","title":"pytest"},{"location":"testing/unittests/","text":"","title":"Test unitaire"}]}